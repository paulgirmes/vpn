class Config:
    """
    configuration options for vpn.py (to be replaced if needed)
    """

    # the route behind the vpn server to be pushed to clients+
    # wan interface name for the VPN
    LAN_TO_PUSH = "'route 10.0.1.0 255.255.255.0'"
    WAN_INTERFACE_NAME = "ens33"

    # EasyRsa Tool vars config file
    RSA = [
        'set_var EASYRSA_REQ_COUNTRY "US"',
        'set_var EASYRSA_REQ_PROVINCE "NewYork"',
        'set_var EASYRSA_REQ_CITY "New York City"',
        'set_var EASYRSA_REQ_ORG "DigitalOcean"',
        'set_var EASYRSA_REQ_EMAIL "admin@example.com"',
        'set_var EASYRSA_REQ_OU "Community"',
    ]
    # VPN server.conf file options
    VPN = [
        "# Generated by vpn.py, model can be found at :",
        "# /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz",
        "port 1194",
        "proto udp",
        "dev tun",
        "ca ca.crt",
        "cert server.crt",
        "key server.key",
        "server 10.8.0.0 255.255.255.0",
        "ifconfig-pool-persist /var/log/openvpn/ipp.txt",
        "keepalive 10 120",
        "tls-auth ta.key 0",
        "auth SHA256",
        "dh dh.pem",
        "push {}".format(LAN_TO_PUSH),
        "cipher AES-256-CBC",
        "user nobody",
        "group nogroup",
        "persist-key",
        "persist-tun",
        "status /var/log/openvpn/openvpn-status.log",
        "verb 4",
        "explicit-exit-notify 1",
    ]

    # /etc/ufw/before.rules
    UFW_BEFORE = [
        "# START OPENVPN RULES",
        "# NAT table rules",
        "*nat",
        ":POSTROUTING ACCEPT [0:0]",
        "# Allow traffic from OpenVPN client to WAN",
        "-A POSTROUTING -s 10.8.0.0/8 {} -j MASQUERADE".format(WAN_INTERFACE_NAME),
        "COMMIT",
        "# END OPENVPN RULES",
    ]
